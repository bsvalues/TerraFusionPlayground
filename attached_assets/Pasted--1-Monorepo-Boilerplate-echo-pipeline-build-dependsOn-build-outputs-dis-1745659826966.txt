# 1. Monorepo Boilerplate
echo '{ "pipeline": { "build": { "dependsOn": ["^build"], "outputs": ["dist/**"] }, "lint": {}, "test": { "dependsOn": ["build"], "outputs": [] } } }' > turbo.json
echo 'packages/*\napps/*\ndocs' > pnpm-workspace.yaml

# 2. Core Packages & Directories
mkdir -p packages/{core-models,ui,plugin-loader,geo-api,ai-core}/src
# core-models
cat > packages/core-models/package.json << 'EOF'
{
  "name": "@terra/core-models",
  "version": "0.1.0",
  "main": "dist/index.js",
  "scripts": { "build": "tsc -b" }
}
EOF
echo '{ "compilerOptions": { "outDir": "dist", "declaration": true, "module": "commonjs", "target": "es2020" } }' \
  > packages/core-models/tsconfig.json

# 3. UI Library
cat > packages/ui/package.json << 'EOF'
{
  "name": "@terra/ui",
  "version": "0.1.0",
  "main": "dist/index.js",
  "scripts": { "build": "tsc -b" }
}
EOF
echo '{ "compilerOptions": { "jsx": "react", "declaration": true, "outDir": "dist" } }' \
  > packages/ui/tsconfig.json

# 4. Plugin Loader
cat > packages/plugin-loader/package.json << 'EOF'
{
  "name": "@terra/plugin-loader",
  "version": "0.1.0",
  "main": "dist/index.js",
  "scripts": { "build": "tsc -b" }
}
EOF
echo '{ "compilerOptions": { "outDir": "dist", "module": "commonjs", "target": "es2020" } }' \
  > packages/plugin-loader/tsconfig.json

# 5. GeoAPI
cat > packages/geo-api/package.json << 'EOF'
{
  "name": "@terra/geo-api",
  "version": "0.1.0",
  "main": "dist/index.js",
  "scripts": { "build": "tsc -b" }
}
EOF
echo '{ "compilerOptions": { "outDir": "dist", "module": "commonjs", "target": "es2020" } }' \
  > packages/geo-api/tsconfig.json

# 6. AI Core
cat > packages/ai-core/package.json << 'EOF'
{
  "name": "@terra/ai-core",
  "version": "0.1.0",
  "main": "dist/index.js",
  "scripts": { "build": "tsc -b" }
}
EOF
echo '{ "compilerOptions": { "outDir": "dist", "module": "commonjs", "target": "es2020" } }' \
  > packages/ai-core/tsconfig.json

# 7. Root Dev Dependencies
pnpm add -DW turbo typescript eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
pnpm add -DW semantic-release @semantic-release/monorepo @semantic-release/changelog @semantic-release/git
pnpm add -DW @docusaurus/core @docusaurus/preset-classic
pnpm add -DW @willsoto/nestjs-prometheus bullmq

# 8. GitHub Actions: Reusable CI
mkdir -p .github/workflows
cat > .github/workflows/reusable-ci.yml << 'EOF'
name: Reusable CI
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - run: pnpm install
      - run: pnpm lint
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [16,18,20]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: node-version: ${{ matrix.node-version }}
      - run: pnpm install
      - run: pnpm test
  scan:
    runs-on: ubuntu-latest
    needs: [lint,test]
    steps:
      - run: npm audit --audit-level=high || true
      - run: pip install pip-audit && pip-audit --exit-zero
EOF

# 9. GitHub Actions: Release
cat > .github/workflows/release.yml << 'EOF'
name: Release
on:
  push:
    branches: [ main ]
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with: node-version: 18
      - run: pnpm install
      - run: pnpm build
      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
EOF

# 10. Docusaurus Documentation
npx create-docusaurus@latest docs classic --typescript
cat >> docs/docusaurus.config.js << 'EOF'
module.exports = {
  presets: [
    ['@docusaurus/preset-classic', {
      docs: { sidebarPath: require.resolve('./sidebars.js'), routeBasePath: '/' },
      blog: false, theme: { customCss: require.resolve('./src/css/custom.css') }
    }],
  ],
};
EOF

# 11. NestJS Observability
# In your NestJS main module:
# import { PrometheusModule } from '@willsoto/nestjs-prometheus';
# @Module({ imports: [PrometheusModule.register(), ...] })
# In your Docker Compose service, expose port 9100 for metrics.

# 12. SBOM & Cosign Signing
# In release.yml after build:
# - name: Build Docker SBOM
#   run: docker build --sbom -t terrafusion:${{ github.sha }} .
# - name: Cosign Sign
#   run: cosign sign --key ${{ secrets.COSIGN_KEY }} terrafusion:${{ github.sha }}

# 13. Plugin Marketplace Scaffold
# Scaffold a Next.js “portal” app in apps/portal for plugin registry, Stripe Connect pages,
# and signed-manifest upload endpoints.

echo "Bootstrap complete. Run 'pnpm turbo run build' and commit all changes."