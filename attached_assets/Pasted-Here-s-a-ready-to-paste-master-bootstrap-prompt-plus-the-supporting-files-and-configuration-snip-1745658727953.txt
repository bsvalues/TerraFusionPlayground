Here’s a ready-to-paste “master” bootstrap prompt — plus the supporting files and configuration snippets — that you can feed directly to the Replit AI Agent to stand up the full TerraFusion monorepo, complete with CI/CD, release automation, documentation, and plugin-marketplace scaffolding. Each section below is annotated with the exact files to create or modify.

Summary

This bootstrap does the following in one shot:
	1.	Monorepo Init with Turborepo & pnpm workspaces
	2.	Core Packages for data models, UI, plugin loader, GeoAPI, AI core
	3.	CI/CD Workflows (lint/test/build/scan) as reusable GitHub Actions
	4.	Release Automation via semantic-release scoped to changed packages
	5.	Docs Site powered by Docusaurus (multi-instance for admin/developer/user)
	6.	Observability Hooks (Prometheus, Grafana endpoints in NestJS)
	7.	Security Hardening (SCA scans, SBOM, DLQ monitoring)
	8.	Plugin Marketplace manifest signing + Stripe integration scaffold
	9.	Developer Portal structure and sidebar configs

⸻

🚀 Bootstrap Prompt for Replit AI Agent

# 1. Monorepo Initialization
echo '{ "pipeline": { "build": { "dependsOn": ["^build"], "outputs": ["dist/**"] } } }' > turbo.json
echo 'packages/*' > pnpm-workspace.yaml

# 2. Create Core Package Layout
mkdir -p packages/{core-models,ui,plugin-loader,geo-api,ai-core}/src

# 3. Core Models
cat > packages/core-models/package.json << 'EOF'
{ "name":"@terra/core-models","version":"0.1.0","main":"dist/index.js","scripts":{"build":"tsc"} }
EOF
echo '{ "compilerOptions": { "outDir":"dist", "declaration":true, "module":"commonjs","target":"es2020" } }' \
  > packages/core-models/tsconfig.json
# (Move your existing schema into packages/core-models/src)

# 4. UI Library
cat > packages/ui/package.json << 'EOF'
{ "name":"@terra/ui","version":"0.1.0","main":"dist/index.js","scripts":{"build":"tsc"} }
EOF
echo '{ "compilerOptions":{"jsx":"react","declaration":true,"outDir":"dist"} }' \
  > packages/ui/tsconfig.json
# (Scaffold src/components and utils directories)

# 5. Plugin Loader
cat > packages/plugin-loader/package.json << 'EOF'
{ "name":"@terra/plugin-loader","version":"0.1.0","main":"dist/index.js","scripts":{"build":"tsc"} }
EOF
echo '{ "compilerOptions":{ "outDir":"dist","module":"commonjs","target":"es2020"} }' \
  > packages/plugin-loader/tsconfig.json
# (Add manifest-schema.ts, verification.ts, payment.ts, plugin-loader.ts in src)

# 6. GeoAPI
cat > packages/geo-api/package.json << 'EOF'
{ "name":"@terra/geo-api","version":"0.1.0","main":"dist/index.js","scripts":{"build":"tsc"} }
EOF
echo '{ "compilerOptions":{ "outDir":"dist","module":"commonjs","target":"es2020"} }' \
  > packages/geo-api/tsconfig.json
# (Implement provider-interface, mapbox/openlayers providers, geo-api.ts)

# 7. AI Core
cat > packages/ai-core/package.json << 'EOF'
{ "name":"@terra/ai-core","version":"0.1.0","main":"dist/index.js","scripts":{"build":"tsc"} }
EOF
echo '{ "compilerOptions":{ "outDir":"dist","module":"commonjs","target":"es2020"} }' \
  > packages/ai-core/tsconfig.json
# (Scaffold LangChain agent setup in src)

# 8. Install Root Dev Dependencies
pnpm add -DW turbo typescript eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
pnpm add -DW semantic-release semantic-release-monorepo @semantic-release/changelog @semantic-release/git
pnpm add -DW @docusaurus/core @docusaurus/preset-classic

# 9. GitHub Actions: .github/workflows/reusable-ci.yml
mkdir -p .github/workflows
cat > .github/workflows/reusable-ci.yml << 'EOF'
name: Reusable CI
on: [push, pull_request]
jobs:
  lint-test:
    uses: ./.github/workflows/lint-test-template.yml
    with:
      matrix-node-version: [16,18,20]
EOF

# 10. Semantic-Release Root Config (package.json)
npx semantic-release-cli setup
# Choose GitHub, Conventional Commits, enable changelog

# 11. Docusaurus Docs Site
npx create-docusaurus@latest docs classic --typescript
# Configure multi-instance in docs/docusaurus.config.js for admin, dev, user  [oai_citation:0‡Docusaurus](https://docusaurus.io/docs/docs-multi-instance?utm_source=chatgpt.com)

# 12. NestJS Observability
pnpm add @willsoto/nestjs-prometheus
# In terrafusion-core app, register PrometheusModule.register() and expose /metrics 

# 13. Security Scans in CI
# In reusable-ci.yml add steps:
#   - run: npm audit --audit-level=high
#   - run: pip install pip-audit && pip-audit

# 14. SBOM Generation
# In .github/workflows/release.yml:
#   - name: Build Docker image with SBOM
#     run: docker build --sbom -t terrafusion:${{ github.sha }} .
#   - name: Cosign sign SBOM
#     run: cosign sign --key $COSIGN_KEY sbom.tgz

# 15. Plugin Marketplace Scaffold
# Add src/portal manifest registry page, Stripe Connect onboarding flows 

EOF



⸻

📂 Supporting Files & Snippets

A. turbo.json

{
  "pipeline": {
    "build": { "dependsOn": ["^build"], "outputs": ["dist/**"] },
    "lint": { "outputs": [] },
    "test": { "dependsOn": ["build"], "outputs": [] }
  }
}

B. pnpm-workspace.yaml

packages:
  - 'packages/*'
  - 'apps/*'
  - 'docs'

C. .github/workflows/reusable-ci.yml

name: CI
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - run: pnpm install
      - run: pnpm lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [16,18,20]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: node-version: ${{ matrix.node-version }}
      - run: pnpm install
      - run: pnpm test

  scan:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - run: npm audit --audit-level=high
      - run: pip install pip-audit && pip-audit

D. release.config.js (root)

module.exports = {
  branches: ["main"],
  repositoryUrl: "https://github.com/your-org/terrafusion",
  plugins: [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    ["@semantic-release/npm", { npmPublish: false }],
    "@semantic-release/changelog",
    ["@semantic-release/git", { assets: ["CHANGELOG.md"], message: "chore(release): ${nextRelease.version} [skip ci]" }]
  ],
  preset: "conventionalcommits",
  tagFormat: "${packageName}-v${version}"
};

E. docs/docusaurus.config.js (excerpt)

module.exports = {
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: { id: 'developer', path: 'docs/developer', routeBasePath: 'developer', sidebarPath: require.resolve('./sidebars-developer.js') },
        blog: false,
        theme: { customCss: require.resolve('./src/css/custom.css') }
      }
    ]
  ],
  plugins: [
    [
      '@docusaurus/plugin-content-docs',
      { id: 'admin', path: 'docs/admin', routeBasePath: 'admin', sidebarPath: require.resolve('./sidebars-admin.js') }
    ],
    [
      '@docusaurus/plugin-content-docs',
      { id: 'user', path: 'docs/user', routeBasePath: 'user', sidebarPath: require.resolve('./sidebars-user.js') }
    ]
  ]
};

￼  ￼

⸻

🔧 Key References & Further Reading
	•	Replit Agent Overview: “Replit Agent uses AI to set up and create apps…”  ￼
	•	Replit’s AI Coding Tools: “Replit AI enables you to accomplish…”  ￼
	•	Practical Setup Guide: DataCamp’s “Replit Agent: A Guide…” walkthrough  ￼
	•	Monorepo Semantic Releases: Best practices with semantic-release-monorepo  ￼
	•	Turborepo Caching: Speed up builds with remote caching
	•	Security Scanning: Integrate npm audit & pip-audit into CI
	•	SBOM & Cosign: Supply-chain compliance with docker build --sbom
	•	NestJS + Prometheus: Expose /metrics endpoint for Grafana SLOs
	•	Docusaurus Multi-Instance Docs: Support admin/dev/user sites in one  ￼
	•	Stripe Connect Onboarding: Automate self-service subscriptions in your portal

With this full bootstrap, the Replit AI Agent has everything it needs—step-by-step commands, file snippets, and configuration references—to consolidate all TerraFusion components into a single monorepo, harden it for production, and publish it as a managed, extensible platform.