name: Release TerraFusion IDE

on:
  push:
    tags:
      - 'v*'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Validate Version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          
      - name: Check Package Version
        run: |
          NODE_VERSION=$(node -p "require('./package.json').version")
          GIT_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$NODE_VERSION" != "$GIT_VERSION" ]; then
            echo "Package version ($NODE_VERSION) doesn't match git tag ($GIT_VERSION)"
            exit 1
          fi

  release:
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          pip install torch numpy
        continue-on-error: true
        
      - name: Build Application
        run: npm run build
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: "true"
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch
        continue-on-error: true
        
      - name: Install 7-Zip
        if: matrix.os == 'windows-latest'
        run: |
          choco install 7zip
          refreshenv
        continue-on-error: true
          
      - name: Optimize Build
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pwsh -File scripts/optimize-build.ps1
          else
            ./scripts/optimize-build.sh
          fi
        continue-on-error: true
          
      - name: Compress Models
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pwsh -File scripts/compress-models.ps1
          else
            bash scripts/compress-models.sh
          fi
        continue-on-error: true
          
      - name: Setup Code Signing
        if: matrix.os == 'windows-latest'
        run: pwsh -File scripts/setup-code-signing.ps1
        continue-on-error: true
        
      - name: Build Installer
        run: npm run electron-builder
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
        continue-on-error: true
          
      - name: Generate Checksums
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            Get-FileHash -Path dist/*.exe -Algorithm SHA256 | Export-Csv -Path dist/checksums.csv -NoTypeInformation
          else
            sha256sum dist/* > dist/checksums.txt
          fi
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: TerraFusion-IDE-${{ matrix.os }}
          path: |
            dist/
            models/compressed/
            build-dashboard/
          if-no-files-found: error
          
      - name: Create Release
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            models/compressed/*.7z
            build-dashboard/*.json
            dist/checksums.*
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Build failed for ${context.job}`,
              body: `Build failed for ${context.job} on ${context.ref}`
            })